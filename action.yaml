name: 'Deploy applications to Argo CD'
description: 'Send applications to Argo CD when to occur project deploy.'
author: 'Robson Andrade<robson.andrade@contraktor.com.br>'
inputs:
  aws-access-key-id:
    description: ' AWS secret key'
    require: true
  aws-secret-access-key:
    description: ' AWS secret'
    require: true
  image-name:
    description: 'same name of repository'
    require: true 
  owner:
    description: 'organization of github'
    require: true
  environment:
    description: 'the application environment ( dev, stg, prod )'
    require: true
  username:
    description: 'username who will commit the application to argo cd'
    require: true
  gh-token:
    description: 'token of github'
    require: true
  repository-name:
    description: 'repository that will be cloned'
    require: true 
  application-name:
    description: 'application name'
    require: true
  path-name:
    description: 'path of environment and platform'
    require: true
  email:
    description: 'email of user who will commit the application to argo cd'
    require: true
  influxdb-token:
    description: 'token to access influxdb instance'
    require: true
  influxdb-url:
    description: 'url to influxdb instance'
    require: true
  app-influx-name:
    description: 'name app to send deploy metric to influxdb ( combined name of platform name plus application name )'
    require: true
  slack-hook: 
    description: 'token connect Slack' 
    require: true
  argocd-domain: 
    description: 'domain intern of Argo CD'
    require: true
  argocd-app: 
    description: 'application name at Argo CD'
    require: true
  project-name:
    description: 'combined name of application name plus platform name '
    require: true
  package-name:
    description: 'package name of ghcr to delete'
    require: true

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: get app version
      id: app
      shell: bash
      env:
        IMAGE: ${{ inputs.image-name }}
        GHCR: 'ghcr.io'
        OWNER: ${{ inputs.owner }}
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        version=`git rev-parse --short HEAD`
        echo "::set-output name=version::${ENVIRONMENT}-$version"
        echo "::set-output name=image::$IMAGE"
        echo "::set-output name=ghcr::$GHCR/$OWNER"
    
    - name: tag docker image to ecr
      shell: bash
      env:
        ECR: ${{ steps.login-ecr.outputs.registry }}
        VERSION: ${{ steps.app.outputs.version }}
        IMAGE: ${{ steps.app.outputs.image }}
      run: |
        docker tag ${APP_NAME}:latest $ECR/$IMAGE:$VERSION
    
    - name: tag docker image to ghcr
      shell: bash
      env:
        ECR: ${{ steps.login-ecr.outputs.registry }}
        VERSION: ${{ steps.app.outputs.version }}
        IMAGE: ${{ steps.app.outputs.image }}
        GHCR: ${{ steps.app.outputs.ghcr }}
      run: |
        docker tag $ECR/$IMAGE:$VERSION $GHCR/$IMAGE:latest
    
    - name: docker push to ecr
      shell: bash
      env:
        ECR: ${{ steps.login-ecr.outputs.registry }}
        VERSION: ${{ steps.app.outputs.version }}
        IMAGE: ${{ steps.app.outputs.image }}
      run: |
        docker push $ECR/$IMAGE:$VERSION
    
    - name: docker login to ghcr
      shell: bash
      env:
        USERNAME: ${{ inputs.username }}
        TOKEN: ${{ inputs.gh-token }}
      run: |
        echo $TOKEN | docker login ghcr.io -u $USERNAME --password-stdin
    
    - name: docker push to ghcr
      shell: bash
      env:
        ECR: ${{ steps.login-ecr.outputs.registry }}
        IMAGE: ${{ steps.app.outputs.image }}
        GHCR: ${{ steps.app.outputs.ghcr }}
      run: |
        docker push $GHCR/$IMAGE:latest

    - name: set docker image to rollout
      shell: bash
      env:
        ECR: ${{ steps.login-ecr.outputs.registry }}
        VERSION: ${{ steps.app.outputs.version }}
        IMAGE: ${{ steps.app.outputs.image }}
        APPLICATION_NAME: ${{ inputs.application-name }}
      run: |
        export DOCKER_IMAGE=$ECR/$IMAGE:$VERSION
        envsubst < deploy/rollout-template.yaml > deploy/${APPLICATION_NAME }-rollout.yaml

    - name: clone repository 
      shell: bash
      working-directory: ${{ inputs.repository-name }}
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        OWNER: ${{ inputs.owner }}
        REPOSITORY_NAME: ${ inputs.repository-name }
        APPLICATION_NAME: ${ inputs.application-name }}
        PATH_NAME: ${{ inputs.path-name }}
      run: |
        git clone -b master https://oauth2:${GH_TOKEN}@github.com/${OWNER}/${REPOSITORY_NAME}.git ${REPOSITORY_NAME}
        cp deploy/${APPLICATION_NAME}-rollout.yaml ${REPOSITORY_NAME}/${PATH_NAME}/${APPLICATION_NAME}-rollout.yaml
    
    - name: config user admin of github
      shell: bash
      working-directory: ${{ inputs.repository-name }}
      env:
        USERNAME: ${{ inputs.username }}
        EMAIL: ${{ inputs.email }}
      run: |
        git config user.name ${USERNAME}
        git config user.email ${EMAIL}
      
    - name: commit alterations at the github
      shell: bash
      working-directory: ${{ inputs.repository-name }}
      run: |
        commit-message=`git show -s --format=%B`  
        git commit -am"$commit-message"
      
    - name: push commit to github
      shell: bash
      working-directory: ${{ inputs.repository-name }}
      run: |     
        git push

    - name: send rollback metric to influxdb
      uses: contraktor-tech/datapoint-producer-action@v2
      env:
        ENVIRONMENT: ${{ inputs.environment }}
      if: |
        ( ${ENVIRONMENT} == 'prod' ) &&
        ( contains(github.event.head_commit.message, 'rollback') ||
        contains(github.event.head_commit.message, 'revert') )
      with:
        influxdb-token: ${{ inputs.influxdb-token }}
        influxdb-url: ${{ inputs.influxdb-url }}
        influxdb-measurement: 'rollback'
        app: ${{ inputs.app-influx-name}}

    - name: send deploy metric to influxdb
      uses: contraktor-tech/datapoint-producer-action@v2
      env:
        ENVIRONMENT: ${{ inputs.environment }}
      if: |
        ( ${ENVIRONMENT} == 'prod' ) &&
        ( !contains(github.event.head_commit.message, 'rollback') &&
        !contains(github.event.head_commit.message, 'revert') )
      with:
        influxdb-token: ${{ inputs.influxdb-token }}
        influxdb-url: ${{ inputs.influxdb-url }}
        influxdb-measurement: 'deploy'
        app: ${{ inputs.app-influx-name}}
    
    - name: deploy has succeeded - Send notification deploy to Slack
      uses: contraktor-tech/slack-notification-action@feat/CK-1953
      if: ${{ success() }}
      with:
        slack-hook: ${{ inputs.slack-hook }}
        argocd-domain: ${{ inputs.argocd-domain}}
        argocd-app: ${{ inputs.argocd-app}}
        project-name: ${{ inputs.project-name }}
        environment-name: ${{ inputs.environment }}
        deploy-status: 'success'

    - name: deploy has failed - Send notification deploy to Slack
      uses: contraktor-tech/slack-notification-action@feat/CK-1953
      if: ${{ failure() }}
      with:
        slack-hook: ${{ inputs.slack-hook }}
        argocd-domain: ${{ inputs.argocd-domain}}
        argocd-app: ${{ inputs.argocd-app}}
        project-name: ${{ inputs.project-name }}
        environment-name: ${{ inputs.environment }}
        deploy-status: 'failure'

    - name: delete ghcr packages
      uses: i9cloud-tech/delete-untagged-ghcr-action@master
      with:
        org: ${{ inputs.owner }}
        gh-token: ${{ inputs.gh-token }}
        package-name: ${{ inputs.package-name }}